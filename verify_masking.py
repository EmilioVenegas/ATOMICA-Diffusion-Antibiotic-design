import pickle
import numpy as np

def verify_masking(processed_data_path, embedded_data_path, sample_id):
    """
    Verifies that the masking of embeddings was successful by comparing the
    number of blocks/atoms in the output file with the expected number from
    the input file for a specific segment.
    
    Args:
        processed_data_path (str): Path to the data file generated by process_pdbs.py.
        embedded_data_path (str): Path to the final embeddings file generated by get_embeddings_masking.py.
        sample_id (str): The 'id' of the complex to inspect (e.g., '6llw_A_A_UDP').
    """
    print("--- Verification Script for ATOMICA Embedding Masking ---")

    # 1. Load both data files
    try:
        with open(processed_data_path, 'rb') as f:
            processed_data = pickle.load(f)
        
        with open(embedded_data_path, 'rb') as f:
            embedded_data = pickle.load(f)
    except FileNotFoundError as e:
        print(f"Error: Could not find file. Make sure paths are correct.\n{e}")
        return

    # 2. Create dictionaries for easy lookup by ID
    processed_data_dict = {item['id']: item for item in processed_data}
    embedded_data_dict = {item['id']: item for item in embedded_data}

    # 3. Check if the sample ID exists in both files
    if sample_id not in processed_data_dict:
        print(f"Error: Sample ID '{sample_id}' not found in the processed data file: {processed_data_path}")
        return
    if sample_id not in embedded_data_dict:
        print(f"Error: Sample ID '{sample_id}' not found in the embedded data file: {embedded_data_path}")
        return

    print(f"\nVerifying complex with ID: '{sample_id}'")

    # 4. Get the relevant data structures
    original_item = processed_data_dict[sample_id]['data']
    embedded_item = embedded_data_dict[sample_id]

    # --- BLOCK VERIFICATION ---
    print("\n--- Verifying Block Embeddings (Residues/Fragments) ---")
    
    total_blocks = len(original_item['B'])
    segment_ids = np.array(original_item['segment_ids'])
    
    # Calculate the expected number of blocks for the protein pocket (segment 0)
    expected_protein_blocks = np.sum(segment_ids == 0)
    
    # Get the actual number of block embeddings saved
    actual_saved_blocks = len(embedded_item['block_embedding'])

    print(f"Total blocks in original data: {total_blocks}")
    print(f"Expected protein pocket blocks (segment_id == 0): {expected_protein_blocks}")
    print(f"Actual blocks saved in final embeddings: {actual_saved_blocks}")
    
    if expected_protein_blocks == actual_saved_blocks:
        print("✅ SUCCESS: The number of saved block embeddings matches the number of protein blocks.")
    else:
        print("❌ FAILED: Mismatch in block embedding counts. Masking may have failed.")

    # --- ATOM VERIFICATION ---
    print("\n--- Verifying Atom Embeddings ---")
    
    # Check if atom data is available (it might be empty if 'A_B' was missing before)
    if 'atom_embedding' not in embedded_item or embedded_item['atom_embedding'].size == 0:
        print("⚠️ WARNING: No atom embeddings were saved for this item. Cannot verify.")
        return

    total_atoms = len(original_item['A'])
    atom_to_block_map = np.array(original_item['A_B'])
    
    # Create a mask for blocks, then use the A_B map to create a mask for atoms
    pocket_block_mask = (segment_ids == 0)
    pocket_atom_mask = pocket_block_mask[atom_to_block_map]
    
    expected_protein_atoms = np.sum(pocket_atom_mask)
    actual_saved_atoms = len(embedded_item['atom_embedding'])

    print(f"Total atoms in original data: {total_atoms}")
    print(f"Expected protein pocket atoms (belonging to segment 0): {expected_protein_atoms}")
    print(f"Actual atoms saved in final embeddings: {actual_saved_atoms}")
    
    if expected_protein_atoms == actual_saved_atoms:
        print("✅ SUCCESS: The number of saved atom embeddings matches the number of protein atoms.")
    else:
        print("❌ FAILED: Mismatch in atom embedding counts. Masking may have failed.")


if __name__ == '__main__':
    
    # Path to the data file from process_pdbs.py 
    processed_data_file = "ATOMICA/data/example/example_outputs.pkl"
    # Path to the final embeddings from get_embeddings_masking.py 
    embedded_data_file = "ATOMICA/data/example/example_outputs_embedded.pkl"
    # The ID of a protein-ligand complex to check 
    sample_to_check = "6llw_A_A_UDP"
    verify_masking(processed_data_file, embedded_data_file, sample_to_check)